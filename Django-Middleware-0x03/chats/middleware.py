from datetime import datetime
import logging

# --- Logging Configuration ---
# This section configures the basic logging setup for the middleware.
# It's important to note that `basicConfig` should ideally be called
# only once when the application starts, typically in a settings file
# or an application initialization script, to avoid re-configuring
# the logger with every module import or middleware instantiation.

logging.basicConfig(
    filename="requests.log",  # Specifies the file where log messages will be written.
    # This file will be created in the current working directory
    # if it doesn't already exist.
    level=logging.INFO,  # Sets the logging threshold to INFO. This means only messages
    # with severity INFO, WARNING, ERROR, or CRITICAL will be
    # processed and written to the log file. DEBUG messages will be ignored.
    format="%(message)s",  # Defines the format string for log messages.
    # "%(message)s" means that only the actual log message,
    # passed to logging.info(), will be recorded, without
    # extra information like timestamp, logger name, or level,
    # as these are being manually added in the log message itself.
)

# --- RequestLoggingMiddleware Class Definition ---
# This class defines a middleware component that can be integrated into
# web frameworks supporting the WSGI (Web Server Gateway Interface) standard,
# such as Django, Flask (with appropriate wrappers), etc.
# Middleware functions as a 'hook' that processes requests before they
# reach the view and responses before they are sent back to the client.


class RequestLoggingMiddleware:
    """
    A simple middleware to log incoming HTTP requests.

    This middleware captures details about each request, including the timestamp,
    the user making the request (distinguishing between authenticated and
    anonymous users), and the requested URL path. It writes these details
    to a configured log file.
    """

    def __init__(self, get_response):
        """
        Initializes the RequestLoggingMiddleware.

        This constructor is called once when the web server starts and loads
        the middleware. It receives a callable that represents the next
        middleware in the chain or the final view function.

        Args:
            get_response (callable): The next middleware or the view function
                                     to be called after this middleware has
                                     processed the request.
        """
        self.get_response = get_response
        # Stores the next callable in the chain. This is crucial for
        # maintaining the flow of request processing.

    def __call__(self, request):
        """
        Processes an incoming HTTP request.

        This method is called for every incoming request. It performs the
        logging action before passing the request to the next component
        in the middleware chain and then returns the response.

        Args:
            request (HttpRequest object): The incoming HTTP request object,
                                         typically provided by the web framework.
                                         It contains details about the client's
                                         request, such as path, user, headers, etc.

        Returns:
            HttpResponse object: The response generated by the subsequent
                                 middleware or the view, which is then passed
                                 back through the middleware chain to the client.
        """

        # --- User Identification Logic ---
        # Determines if the request is made by an authenticated user or an anonymous one.
        # This assumes the 'request' object has a 'user' attribute (e.g., from Django's
        # authentication middleware) and that the user object has an 'is_authenticated' property.
        user = request.user if request.user.is_authenticated else "AnonymousUser"
        # If 'request.user' exists and 'request.user.is_authenticated' is True,
        # 'user' will be set to 'request.user' (often a User object).
        # Otherwise, 'user' will be the string "AnonymousUser".

        # --- Log the Request Details ---
        # An informational log entry is created with details about the request.
        logging.info(f"{datetime.now()} - User: {user} - Path: {request.path}")
        # `datetime.now()`: Captures the current timestamp for when the request was processed.
        # `User: {user}`: Includes the identified user (authenticated or anonymous).
        # `Path: {request.path}`: Records the URL path requested by the client (e.g., '/home/').

        # --- Pass the Request Down the Chain ---
        # Calls the next callable in the middleware chain (or the view) with the request.
        # This is where the actual request processing (e.g., view logic, database queries) happens.
        response = self.get_response(request)

        # --- Return the Response ---
        # After the request has been processed by subsequent layers and a response
        # has been generated, this middleware returns that response.
        # This allows other middleware further up the chain (or the web server)
        # to continue processing or send the response back to the client.
        return response
